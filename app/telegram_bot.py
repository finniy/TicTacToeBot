import telebot
from telebot.types import Message
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from app.work_with_inline import callback_handler
from app.add_user_in_game import *
from app.config import API_KEY
from app.generate_game_key import generate_game_key
from app.game_logic import *
from app.work_with_keyboard import *

bot = telebot.TeleBot(API_KEY)
active_games = {}


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/start'))
def start(message: Message) -> None:
    bot.send_message(
        chat_id=message.chat.id,
        text="üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç *–ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏*!\n\n"
             "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
             "/create ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
             "/join ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –ø–æ –∫–æ–¥—É\n"
             "/help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        parse_mode="Markdown"
    )


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/help'))
def help(message: Message) -> None:
    bot.send_message(
        chat_id=message.chat.id,
        text="üÜò –ü–æ–º–æ—â—å:\n\n"
             "/create ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –≤—ã–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥\n"
             "/join ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ –ø–æ –∫–æ–¥—É\n\n"
             "–ü–µ—Ä–µ–¥–∞–π –¥—Ä—É–≥—É –∫–æ–¥ –∏–≥—Ä—ã, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Ç–µ–±–µ!",
    )


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/create'))
def create(message: Message) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.username if message.from_user.username is not None else '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫'

    if is_user_in_game(user_id, active_games):
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ö†Ô∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ."
        )
        return

    game_key = generate_game_key()
    active_games[game_key] = {
        "players_id": [user_id],
        "players_name": [user_name],
        "board": start_game(),
        "turn": user_id,
        "symbols": {user_id: '‚ùå'},
        "messages": {}
    }

    print(f'[+] {user_name} —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É {game_key}')

    bot.send_message(
        chat_id=message.chat.id,
        text=f"‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
             f"üîë –ö–æ–¥: *{game_key}*\n"
             f"–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!",
        parse_mode="Markdown"
    )


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/join'))
def join(message: Message) -> None:
    user_id = message.from_user.id

    if is_user_in_game(user_id, active_games):
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ö†Ô∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ."
        )
        return

    if active_games:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for game_key in active_games.keys():
            btn = KeyboardButton(text=game_key)
            keyboard.add(btn)

        bot.send_message(
            chat_id=message.chat.id,
            text="üéÆ –í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É:",
            reply_markup=keyboard
        )
        bot.register_next_step_handler(message, lambda msg: add_user(msg, bot, active_games))

    else:
        bot.send_message(
            chat_id=message.chat.id,
            text="üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä"
        )


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    callback_handler(
        call,
        bot,
        active_games,
        create_board_keyboard,
        check_winner,
        check_draw
    )

def main():
    bot.polling(none_stop=True)
